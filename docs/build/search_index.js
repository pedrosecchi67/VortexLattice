var documenterSearchIndex = {"docs":
[{"location":"#VortexLattice.jl","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"","category":"section"},{"location":"","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"VortexLattice.jl is a Julia package for the Vortex Lattice Method I've created for my hobbies and academic projects. It is meant to make simple the conceptual design of aircraft configurations of interest, as in the example below.","category":"page"},{"location":"","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"It is currently capable of obtaining:","category":"page"},{"location":"","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"Hinge moments;\nSectional and surface coefficients;\nFull configuration coefficients;\nGeometry and spatial distribution plots (using matplotlib as a back-end).","category":"page"},{"location":"","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"using VortexLattice\n\n# geometry\n\nb=1.0\ncroot=0.25\ntaper=0.5\ntwist=-10.0\ntheta_root=5.0\nsweep=30.0\ndihedron=5.0\n\n# flight conditions\n\nalpha=5.0\ndelta_aileron=5.0\n\n# reference dimensions\n\nSref=b*croot*(1.0+taper)/2\ncref=(2.0*(taper^2+taper+1.0))*croot/(3.0*(1.0+taper))\nbref=b\n\n# discretization settings\n\ncos_dist=collect(LinRange(-pi/2, pi/2, 20))\ncos_dist=[sin(e)/2+0.5 for e in cos_dist]\n\n# airfoils (see API reference for further detail)\n\nfplate=inviscid_flatplate()\n\n# wing sections\n\nsleft=Section(\n    [b*tand(sweep)/2, -b/2, b*tand(dihedron)/2], \n    croot*taper; \n    incidence=theta_root+twist, \n    controls=[(:aileron, 0.2, 1.0)]\n)\nscenter=Section(\n    [0.0, 0.0, 0.0], \n    croot; incidence=theta_root, \n    controls=[(:aileron, 0.2, 1.0), \n    (:aileron, 0.2, -1.0)]\n)\nsright=Section(\n    [b*tand(sweep)/2, b/2, b*tand(dihedron)/2], \n    croot*taper; \n    incidence=theta_root+twist, \n    controls=[(:aileron, 0.2, -1.0)]\n)\n\ncdiscs=[cos_dist, cos_dist, cos_dist]\nbdiscs=[cos_dist, cos_dist]\n\n# surfaces\n\nsurf=Surface([sleft, scenter, sright], cdiscs, bdiscs)\n\n# complete aircraft and solution\n\nacft=Aircraft([surf]; Sref=Sref, bref=bref, cref=cref)\n\n# coefficient calculations\n\ndat=get_data(acft; alpha=alpha, control_deflections=Dict(:aileron=>delta_aileron))\n\n# plotting (based on matplotlib wrappers)\n\nplot_aircraft(acft)","category":"page"},{"location":"#API-Reference","page":"VortexLattice.jl","title":"API Reference","text":"","category":"section"},{"location":"","page":"VortexLattice.jl","title":"VortexLattice.jl","text":"Airfoil\ninviscid_flatplate\nSection\nSection(LE::Vector{Float64}, chord::Float64; incidence::Float64=0.0, afl=inviscid_flatplate(), controls=[])\nSurface\nSurface(sects::Vector{Section}, cdiscs::Vector{Vector{Float64}}, bdiscs::Vector{Vector{Float64}})\nAircraft\nAircraft(surfaces::Vector{Surface}; Sref::Float64=1.0, cref::Float64=1.0, bref::Float64=1.0)\nVLsolve\nget_data\nplot_aircraft\nplot_props","category":"page"},{"location":"#VortexLattice.Airfoil","page":"VortexLattice.jl","title":"VortexLattice.Airfoil","text":"Struct to contain information about an airfoil\n\ncamberline_coords: matrix (shape (npts, 2)) containing airfoil camber line coordinates\nCL_correct: function as C_L=C_L inv +CL_correct(CL)\nCD_correct: function as C_D=C_D inv+ CD_correct(CL)\n\n\n\n\n\n","category":"type"},{"location":"#VortexLattice.inviscid_flatplate","page":"VortexLattice.jl","title":"VortexLattice.inviscid_flatplate","text":"Constructor for inviscid flat plate airfoil\n\n\n\n\n\n","category":"function"},{"location":"#VortexLattice.Section","page":"VortexLattice.jl","title":"VortexLattice.Section","text":"Struct to define wing sections\n\nLE: position of the leading edge\nchord: section chord\nincidence: section incidences\nafl: instance of struct Airfoil to use for viscous corrections\n\n\n\n\n\n","category":"type"},{"location":"#VortexLattice.Section-Tuple{Array{Float64,1},Float64}","page":"VortexLattice.jl","title":"VortexLattice.Section","text":"Constructor for wing section. Uses a flat plate airfoil as default\n\nLE: position of the leading edge\nchord: section chord\nincidence: section incidence. Defaults to zero\nafl: instance of struct Airfoil to use for viscous corrections. Defaults to flat plate\ncontrols: array of tuples indicating present control surfaces. Tuples should indicate, respectively, the control's name (Symbol), the percentage of the chord in which it's initiated and its gain in the present section\n\n\n\n\n\n","category":"method"},{"location":"#VortexLattice.Surface","page":"VortexLattice.jl","title":"VortexLattice.Surface","text":"Struct to model a lifting surface\n\nquadrants: vector of wing quadrants\npts: points representing panel corners (shape (nm+1, nn+1, 3))\ncolpts: locations of collocation points (shape (nm, nn, 3))\nnormals: normal vectors at each collocation point (shape (nm, nn, 3))\nmtosys: local coordinate system matrix at each panel\nkins: locations for vortex kins (shape (nm, nn+1, 3))\nchords: chord at each panel strip\nwidths: width of each panel strip\nquarter_chords: matrix (shape (nstrips, 3)) with quarter chord positions across the span\nairfoil_ponderations: array of tuples containing two Airfoil instances and a ponderation factor. Used for viscous corrections\ncontrol_ponderations: matrix of tuples indicating, respectively, the name (Symbol) and the gain (float) for each control surface acting on each panel\nmac: mean aerodynamic chord\nS: surface area\n\n\n\n\n\n","category":"type"},{"location":"#VortexLattice.Surface-Tuple{Array{Section,1},Array{Array{Float64,1},1},Array{Array{Float64,1},1}}","page":"VortexLattice.jl","title":"VortexLattice.Surface","text":"Constructor for a lifting surface based on a list of sections (from left to right)\n\nFor arguments cdiscs and bdiscs, a usage example is:\n\n`sects=[   (LE=[1.0, -1.0, 0.0], chord=0.5),   (LE=[0.0, 0.0, 0.0], chord=1.0),   (LE=[1.0, -1.0, 0.0], chord=0.5) ] bdiscs=[   [0.0, 0.5, 1.0],   [0.0, 1.0] ] cdiscs=[   [0.0, 0.5, 1.0],   [0.0, 0.5, 1.0],   [0.0, 0.5, 1.0] ]\n\nwould result in the panel corners: [   [1.0, -1.0, 0.0] [0.5, -0.5, 0.0] [0.0, 0.0, 0.0] [1.0, 1.0, 0.0]   [1.25, -1.0, 0.0] [0.875, -0.5, 0.0] [0.5, 0.0, 0.0] [1.25, 1.0, 0.0]   [1.5, -1.0, 0.0] [1.25, -0.5, 0.0] [1.0, 0.0, 0.0] [1.5, 1.0, 0.0] ]`\n\nsects: vector of sections to base the surface on\ncdiscs: vector of vectors, each describing a mapping for the chordwise discretization in a wing section (ranging from zero to 1, and spaced as desired for panel edges)\nbdiscs: vector of vectors, each describing a mapping for the spanwise discretization in a wing quadrant\n\n\n\n\n\n","category":"method"},{"location":"#VortexLattice.Aircraft","page":"VortexLattice.jl","title":"VortexLattice.Aircraft","text":"Abstract data type to contain information about an aircraft\n\nSref: reference surface\ncref: reference chord\nbref: reference span\nsurfaces: array of surfaces to compose the aircraft\ncolpts: the totality of the mesh's control points (vector of vectors format)\nnormals: their respective normal vectors (vector of vectors format)\nmtosys: vector of local coordinate system matrices\ncontrol_ponderations: vector of vector of tuples indicating, respectively, the name (Symbol),  the hinge arm and the gain for each control surface acting on each panel\nkins: their respective vortex kins (vector of tuple of vectors format)\nAICM3: aerodynamic influence coefficient matrix in 3D\nAICM: aerodynamic influence coefficient matrix\nLU_AICM: LU-decomposed aerodynamic coefficient matrix\n\n\n\n\n\n","category":"type"},{"location":"#VortexLattice.Aircraft-Tuple{Array{Surface,1}}","page":"VortexLattice.jl","title":"VortexLattice.Aircraft","text":"Constructor for Aircraft struct based on an array of surfaces\n\nsurfaces: vector of surfaces\nSref: reference surface\ncref: reference chord\nbref: reference span\n\n\n\n\n\n","category":"method"},{"location":"#VortexLattice.VLsolve","page":"VortexLattice.jl","title":"VortexLattice.VLsolve","text":"Function to return an array of vortex intensities comprising a vortex lattice method solution for the given flight conditions\n\nacft: the aircraft object\nalpha: angle of attack\nbeta: sideslip angle\np: x axis (stability and control coordinate system) angular velocity\nq: y axis (stability and control coordinate system) angular velocity\nr: z axis (stability and control coordinate system) angular velocity\ncontrol_deflections: dictionary relating control naming (Symbols) to control deflections\nreturn: an array with the vorticity strength in each horseshoe vortex in the mesh\nreturn: total (influence+freestream) velocity at each collocation point\n\n\n\n\n\n","category":"function"},{"location":"#VortexLattice.get_data","page":"VortexLattice.jl","title":"VortexLattice.get_data","text":"Function to obtain all pertinent coefficients for an aircraft\n\nacft: Aircraft struct instance\nalpha: angle of attack\nbeta: sideslip angle\np: x axis (stability and control coordinate system) angular velocity\nq: y axis (stability and control coordinate system) angular velocity\nr: z axis (stability and control coordinate system) angular velocity\ncontrol_deflections: dictionary relating control symbols and control deflections\nCG: vector with coordinates for momentum calculations\n\n\n\n\n\n","category":"function"},{"location":"#VortexLattice.plot_aircraft","page":"VortexLattice.jl","title":"VortexLattice.plot_aircraft","text":"Plot aircraft geometry using matplotlib backend\n\nacft: the aircraft to plot\n\n\n\n\n\n","category":"function"},{"location":"#VortexLattice.plot_props","page":"VortexLattice.jl","title":"VortexLattice.plot_props","text":"Plot a property throughout an aircraft's mesh\n\nacft: the aircraft at hand\nprop: array mapping the property's value at every panel\n\n\n\n\n\n","category":"function"}]
}
